/*********************************************************************************************
 * Copyright (c) 2014-2015  Software Behaviour Analysis Lab, Concordia University, Montreal, Canada
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of Eclipse Public License v1.0 License which
 * accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Syed Shariyar Murtaza -- Initial design and implementation
 **********************************************************************************************/
package org.eclipse.tracecompass.totalads.core;

import java.io.File;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.eclipse.tracecompass.totalads.core.Activator;
import org.eclipse.tracecompass.totalads.dbms.DBMSFactory;
import org.eclipse.tracecompass.totalads.algorithms.AlgorithmFactory;
import org.eclipse.tracecompass.totalads.readers.TraceTypeFactory;
import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

/**
 * Activator for the plugin, called by Eclipse
 *
 * @author <p>
 *         Syed Shariyar Murtaza justsshary@hotmail.com
 *         </p>
 *
 */
public class Activator implements BundleActivator {

    private static BundleContext context;
    private static Logger log;
    
    static BundleContext getContext() {
        return context;
        
    }

    /*
     * (non-Javadoc)
     *
     * @see
     * org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext
     * )
     */
    @Override
    public void start(BundleContext bundleContext) throws Exception {
        Activator.context = bundleContext;
        init();
    }

    /*
     * (non-Javadoc)
     *
     * @see
     * org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
     */
    @Override
    public void stop(BundleContext bundleContext) throws Exception {
        Activator.context = null;
        deInitialize();
    }

    /**
     *
     * Initializes TotalADS
     *
     */

    private static void init() {
        try {

            AlgorithmFactory algFactory = AlgorithmFactory.getInstance();
            algFactory.initialize();

            TraceTypeFactory trcTypeFactory = TraceTypeFactory.getInstance();
            trcTypeFactory.initialize();

            // Initialize the regular java logger
            // Handler handler = null;
            //handler = new java.util.logging.SocketHandler("localhost", 5000); //$NON-NLS-1$
            //handler = new java.util.logging.FileHandler(getCurrentPath() + "totaladslog.xml"); //$NON-NLS-1$
            //Logger.getLogger("").addHandler(handler); //$NON-NLS-1$

            // Initialize the log4j logger
            log = Logger.getLogger(Activator.class.getName());
            initializeLog4j();

        } catch (Exception ex) { // capture all the exceptions here
            // Regular java logger
            // Logger.getLogger(Activator.class.getName()).log(Level.SEVERE,
            // null, ex);
            // log4j logger
            log.error(ex.getMessage(), ex);
        }
    }

    /**
     * Initializes log4jProperties
     */
    private static void initializeLog4j() {

        Properties log4jProperties = new Properties();
        log4jProperties.setProperty("log4j.appender.stdout", "org.apache.log4j.ConsoleAppender"); //$NON-NLS-1$ //$NON-NLS-2$
        log4jProperties.setProperty("log4j.appender.stdout.layout", "org.apache.log4j.PatternLayout"); //$NON-NLS-1$ //$NON-NLS-2$
        log4jProperties.setProperty("log4j.appender.stdout.layout.ConversionPattern", "[%d,%p] [%c{1}.%M:%L] %m%n"); //$NON-NLS-1$ //$NON-NLS-2$

        log4jProperties.setProperty("log4j.appender.airbrake", "airbrake.AirbrakeAppender"); //$NON-NLS-1$ //$NON-NLS-2$
        log4jProperties.setProperty("log4j.appender.airbrake.api_key", "4f7d79c04de1d85410279b46efcbb0e2"); //$NON-NLS-1$ //$NON-NLS-2$
        log4jProperties.setProperty("log4j.appender.airbrake.env", "production"); //$NON-NLS-1$ //$NON-NLS-2$
        log4jProperties.setProperty("log4j.appender.airbrake.enabled", "true"); //$NON-NLS-1$ //$NON-NLS-2$
        log4jProperties.setProperty("log4j.appender.airbrake.url", "http://api.airbrake.io/notifier_api/v2/notices"); //$NON-NLS-1$ //$NON-NLS-2$

        log4jProperties.setProperty("log4j.rootLogger", "INFO, stdout, airbrake"); //$NON-NLS-1$ //$NON-NLS-2$
        PropertyConfigurator.configure(log4jProperties);

    }

    /**
     * Returns the current directory of the application
     *
     * @return Path
     *
     */
    public static String getCurrentPath() {
        String applicationDir = System.getProperty("user.dir"); //$NON-NLS-1$
        System.out.println(applicationDir);
        return applicationDir + File.separator;
    }

    /**
     * DeInitializes TotalADS
     */
    private static void deInitialize() {
        DBMSFactory.INSTANCE.closeConnection();
        // This code deinitializes the Factory instance. It was necessary
        // because
        // if TotalADS plugin is reopened in running Eclipse, the static objects
        // are not
        // deinitialized on previous close of the plugin.
        AlgorithmFactory.destroyInstance();
        TraceTypeFactory.destroyInstance();
    }

}
